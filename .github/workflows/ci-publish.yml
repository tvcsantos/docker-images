name: Publish Docker images

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  get-images:
    name: Get Images
    runs-on: ubuntu-latest
    outputs:
      ids: ${{ steps.get-ids.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        shell: bash
        # language=bash
        run: |
          npm install --no-save fs.promises

      - name: Get Images from Manifest
        id: get-ids
        uses: actions/github-script@v7
        with:
          # language=typescript
          script: |
            // noinspection TypeScriptUnresolvedReference

            const fs = require('fs/promises');

            const manifest = JSON.parse(await fs.readFile('manifest.json', 'utf8'));

            return manifest.map(c => c.id);

  update-images:
    permissions:
      contents: write
    name: Update Images
    runs-on: ubuntu-latest
    needs: get-images
    strategy:
      matrix:
        id: ${{ fromJSON(needs.get-images.outputs.ids) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        shell: bash
        # language=bash
        run: |
          npm install --no-save fs.promises
          npm install --no-save axios

      - name: Check for updates
        id: check-for-updates
        uses: actions/github-script@v7
        env:
          CONFIGURATION_ID: ${{ matrix.id }}
        with:
          result-encoding: string
          # language=typescript
          script: |
            // noinspection TypeScriptUnresolvedReference

            const { CONFIGURATION_ID } = process.env;
            
            console.log(`Checking for updates for configuration ${CONFIGURATION_ID}`);
            
            const fs = require('fs/promises');
            const axios = require('axios');

            const manifest = JSON.parse(await fs.readFile('manifest.json', 'utf8'));

            // find configuration with id
            const configuration = manifest.find(c => c.id === CONFIGURATION_ID);
            const image = configuration.image;
            let platforms = configuration.platforms;
            const [name, tag] = image.split(':');
            if (!platforms) {
                platforms = [];
                configuration.platforms = platforms;
            }
            
            console.log(`Checking for updates for image ${image}`);

            const {data} = await axios.get(`https://registry.hub.docker.com/v2/repositories/${name}/tags/${tag}/`);

            const platformsToUpdate = [];

            for (const hubImage of (data.images || [])) {
                const {architecture, os, digest} = hubImage;

                let platform = platforms.find(p => p.architecture === architecture && p.os === os);

                if (!platform) {
                    platform = {architecture, os};
                    configuration.platforms.push(platform);
                }

                if (platform.digest !== digest) {
                    const platformId = `${platform.os}/${platform.architecture}`;
                    console.log(`Image ${image} has a new digest for platform ${platformId}`);
                    platform.digest = digest;
                    platformsToUpdate.push(platformId);
                }
            }

            await fs.writeFile('updatedManifest.json', JSON.stringify(manifest, null, 2));
            return platformsToUpdate.join(',');

      - name: Set up Docker Buildx
        if: steps.check-for-updates.outputs.result != ''
        uses: docker/setup-buildx-action@v3

      - name: Login to Docuker Hub
        if: steps.check-for-updates.outputs.result != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        if: steps.check-for-updates.outputs.result != ''
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.id }}
          platforms: ${{ steps.check-for-updates.outputs.result }}
          push: true
          pull: true
          tags: |
            ${{ github.repository_owner }}/${{ matrix.id }}:latest
          cache-from: type=gha # https://docs.docker.com/build/cache/backends/gha/
          cache-to: type=gha,mode=max

      - name: Update Manifest
        if: steps.check-for-updates.outputs.result != ''
        shell: bash
        # language=bash
        run: |
          mv updatedManifest.json manifest.json
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add manifest.json
            git commit -m "feat: update manifest"
            git push
          else
            echo "No changes to commit"
          fi
